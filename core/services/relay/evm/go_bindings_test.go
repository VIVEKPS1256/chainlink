package evm_test

import (
	"github.com/smartcontractkit/chainlink-common/pkg/types"
	"github.com/smartcontractkit/chainlink-common/pkg/types/interfacetests"
	"github.com/smartcontractkit/chainlink-common/pkg/types/query/primitives"
	"github.com/smartcontractkit/chainlink-common/pkg/utils/tests"
	"github.com/smartcontractkit/chainlink/v2/core/chains/evm/assets"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated/chain_reader_tester"
	"github.com/smartcontractkit/chainlink/v2/core/services/relay/evm/bindings"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"math/big"
	"testing"
	"time"

	_ "github.com/smartcontractkit/chainlink-common/pkg/types/interfacetests"       //nolint common practice to import test mods with .
	. "github.com/smartcontractkit/chainlink/v2/core/services/relay/evm/evmtesting" //nolint common practice to import test mods with .
)

//go:generate evm-bindings -output core/services/relay/evm/bindings -contracts contracts/src/v0.8/shared/test/helpers
func TestGoBindings(t *testing.T) {
	t.Parallel()

	chainReaderConfig := bindings.NewChainReaderConfig()
	chainWriterConfig := bindings.NewChainWriterConfig()

	it := &EVMChainComponentsInterfaceTester[*testing.T]{Helper: &Helper{},
		ChainReaderConfig: &chainReaderConfig, ChainWriterConfig: &chainWriterConfig}

	it.Helper.Init(t)

	t.Run("Deploy contract set value using cw and get value using chain reader", func(t *testing.T) {
		//TODO remove. This value cannot be autogenerated so we need a way to customize it.
		chainWriterConfig.MaxGasPrice = assets.NewWei(big.NewInt(1000000000))

		it.Setup(t)

		chainWriterConfig.Contracts["ChainReaderTester"].Configs["SetAlterablePrimitiveValue"].FromAddress = it.GetAuthWithGasSet(t).From

		//address, _, deployedContract, err := chain_reader_tester.DeployChainReaderTester(it.GetAuthWithGasSet(t), it.Helper.Backend())
		address, _, _, err := chain_reader_tester.DeployChainReaderTester(it.GetAuthWithGasSet(t), it.Helper.Backend())
		require.NoError(t, err)
		chainReader := it.GetChainReader(t)
		chainWriter := it.GetChainWriter(t)
		testContext := it.Helper.Context(t)

		//TODO properly wait for contract deployment confirmation
		time.Sleep(time.Duration(5) * time.Second)
		require.NoError(t, chainReader.Bind(testContext, []types.BoundContract{{address.String(), "ChainReaderTester"}}))
		it.IncNonce()

		chainReaderTester := bindings.ChainReaderTester{
			ContractReader: chainReader,
			ChainWriter:    chainWriter,
		}

		txId := "123"
		err = chainReaderTester.SetAlterablePrimitiveValue(testContext, bindings.SetAlterablePrimitiveValueInput{Value: uint64(100)}, txId, address.String(), nil)
		require.NoError(t, err)

		err = interfacetests.WaitForTransactionStatus(t, it, txId, types.Finalized, false)
		require.NoError(t, err)
		//_, err = deployedContract.SetAlterablePrimitiveValue(it.GetAuthWithGasSet(t), 100)
		//require.NoError(t, err)

		value, err := chainReaderTester.GetAlterablePrimitiveValue(testContext, primitives.Unconfirmed)
		require.NoError(t, err)
		assert.Equal(t, value, uint64(100))
	})
}

func TestGoBindingsTxWithGeth(t *testing.T) {
	t.Parallel()

	chainReaderConfig := bindings.NewChainReaderConfig()

	it := &EVMChainComponentsInterfaceTester[*testing.T]{Helper: &Helper{},
		ChainReaderConfig: &chainReaderConfig}

	it.Helper.Init(t)
	t.Run("Deploy contract set value using geth and get value using chain reader", func(t *testing.T) {
		it.Setup(t)

		ctx := tests.Context(t)

		address, _, deployedContract, err := chain_reader_tester.DeployChainReaderTester(it.GetAuthWithGasSet(t), it.Helper.Backend())
		require.NoError(t, err)
		it.IncNonce()
		_, err = deployedContract.SetAlterablePrimitiveValue(it.GetAuthWithGasSet(t), 100)
		require.NoError(t, err)

		time.Sleep(time.Duration(5) * time.Second)

		chainReader := it.GetChainReader(t)
		require.NoError(t, chainReader.Bind(ctx, []types.BoundContract{{address.String(), "ChainReaderTester"}}))

		chainReaderTester := bindings.ChainReaderTester{
			ContractReader: chainReader,
		}

		value, err := chainReaderTester.GetAlterablePrimitiveValue(ctx, primitives.Unconfirmed)
		require.NoError(t, err)
		assert.Equal(t, value, uint64(100))
	})
}
