From b9b5c8dbc2eab86b632265d36c8ed0425644c1b0 Mon Sep 17 00:00:00 2001
From: Pablo La Greca <pablo.lagreca@msartcontract.com>
Date: Tue, 10 Sep 2024 17:03:16 -0300
Subject: [PATCH] adding test cases for using generated CR/CW and bindings

---
 .../shared/test/helpers/ChainReaderTester.abi |   1 +
 .../shared/test/helpers/ChainReaderTester.bin |   1 +
 .../evm/bindings/chain_config_factory.go      | 111 +++++++
 .../relay/evm/bindings/chain_reader_tester.go | 178 +++++++++++
 .../relay/evm/chain_components_test.go        |  35 +--
 .../chain_components_interface_tester.go      | 278 +++++++++---------
 core/services/relay/evm/go_bindings_test.go   | 106 +++++++
 7 files changed, 557 insertions(+), 153 deletions(-)
 create mode 100644 contracts/src/v0.8/shared/test/helpers/ChainReaderTester.abi
 create mode 100644 contracts/src/v0.8/shared/test/helpers/ChainReaderTester.bin
 create mode 100644 core/services/relay/evm/bindings/chain_config_factory.go
 create mode 100644 core/services/relay/evm/bindings/chain_reader_tester.go
 create mode 100644 core/services/relay/evm/go_bindings_test.go

diff --git a/contracts/src/v0.8/shared/test/helpers/ChainReaderTester.abi b/contracts/src/v0.8/shared/test/helpers/ChainReaderTester.abi
new file mode 100644
index 0000000000..11aca984cd
--- /dev/null
+++ b/contracts/src/v0.8/shared/test/helpers/ChainReaderTester.abi
@@ -0,0 +1 @@
+[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"int32","name":"field","type":"int32"},{"indexed":false,"internalType":"string","name":"differentField","type":"string"},{"indexed":false,"internalType":"uint8","name":"oracleId","type":"uint8"},{"indexed":false,"internalType":"uint8[32]","name":"oracleIds","type":"uint8[32]"},{"indexed":false,"internalType":"address","name":"Account","type":"address"},{"indexed":false,"internalType":"address[]","name":"Accounts","type":"address[]"},{"indexed":false,"internalType":"int192","name":"bigField","type":"int192"},{"components":[{"internalType":"bytes2","name":"FixedBytes","type":"bytes2"},{"components":[{"internalType":"int64","name":"IntVal","type":"int64"},{"internalType":"string","name":"S","type":"string"}],"internalType":"struct InnerTestStruct","name":"Inner","type":"tuple"}],"indexed":false,"internalType":"struct MidLevelTestStruct","name":"nestedStruct","type":"tuple"}],"name":"Triggered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"string","name":"fieldHash","type":"string"},{"indexed":false,"internalType":"string","name":"field","type":"string"}],"name":"TriggeredEventWithDynamicTopic","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"int32","name":"field1","type":"int32"},{"indexed":true,"internalType":"int32","name":"field2","type":"int32"},{"indexed":true,"internalType":"int32","name":"field3","type":"int32"}],"name":"TriggeredWithFourTopics","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"string","name":"field1","type":"string"},{"indexed":true,"internalType":"uint8[32]","name":"field2","type":"uint8[32]"},{"indexed":true,"internalType":"bytes32","name":"field3","type":"bytes32"}],"name":"TriggeredWithFourTopicsWithHashed","type":"event"},{"inputs":[{"internalType":"int32","name":"field","type":"int32"},{"internalType":"string","name":"differentField","type":"string"},{"internalType":"uint8","name":"oracleId","type":"uint8"},{"internalType":"uint8[32]","name":"oracleIds","type":"uint8[32]"},{"internalType":"address","name":"account","type":"address"},{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"int192","name":"bigField","type":"int192"},{"components":[{"internalType":"bytes2","name":"FixedBytes","type":"bytes2"},{"components":[{"internalType":"int64","name":"IntVal","type":"int64"},{"internalType":"string","name":"S","type":"string"}],"internalType":"struct InnerTestStruct","name":"Inner","type":"tuple"}],"internalType":"struct MidLevelTestStruct","name":"nestedStruct","type":"tuple"}],"name":"addTestStruct","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAlterablePrimitiveValue","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDifferentPrimitiveValue","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"i","type":"uint256"}],"name":"getElementAtIndex","outputs":[{"components":[{"internalType":"int32","name":"Field","type":"int32"},{"internalType":"string","name":"DifferentField","type":"string"},{"internalType":"uint8","name":"OracleId","type":"uint8"},{"internalType":"uint8[32]","name":"OracleIds","type":"uint8[32]"},{"internalType":"address","name":"Account","type":"address"},{"internalType":"address[]","name":"Accounts","type":"address[]"},{"internalType":"int192","name":"BigField","type":"int192"},{"components":[{"internalType":"bytes2","name":"FixedBytes","type":"bytes2"},{"components":[{"internalType":"int64","name":"IntVal","type":"int64"},{"internalType":"string","name":"S","type":"string"}],"internalType":"struct InnerTestStruct","name":"Inner","type":"tuple"}],"internalType":"struct MidLevelTestStruct","name":"NestedStruct","type":"tuple"}],"internalType":"struct TestStruct","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrimitiveValue","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getSliceValue","outputs":[{"internalType":"uint64[]","name":"","type":"uint64[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int32","name":"field","type":"int32"},{"internalType":"string","name":"differentField","type":"string"},{"internalType":"uint8","name":"oracleId","type":"uint8"},{"internalType":"uint8[32]","name":"oracleIds","type":"uint8[32]"},{"internalType":"address","name":"account","type":"address"},{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"int192","name":"bigField","type":"int192"},{"components":[{"internalType":"bytes2","name":"FixedBytes","type":"bytes2"},{"components":[{"internalType":"int64","name":"IntVal","type":"int64"},{"internalType":"string","name":"S","type":"string"}],"internalType":"struct InnerTestStruct","name":"Inner","type":"tuple"}],"internalType":"struct MidLevelTestStruct","name":"nestedStruct","type":"tuple"}],"name":"returnSeen","outputs":[{"components":[{"internalType":"int32","name":"Field","type":"int32"},{"internalType":"string","name":"DifferentField","type":"string"},{"internalType":"uint8","name":"OracleId","type":"uint8"},{"internalType":"uint8[32]","name":"OracleIds","type":"uint8[32]"},{"internalType":"address","name":"Account","type":"address"},{"internalType":"address[]","name":"Accounts","type":"address[]"},{"internalType":"int192","name":"BigField","type":"int192"},{"components":[{"internalType":"bytes2","name":"FixedBytes","type":"bytes2"},{"components":[{"internalType":"int64","name":"IntVal","type":"int64"},{"internalType":"string","name":"S","type":"string"}],"internalType":"struct InnerTestStruct","name":"Inner","type":"tuple"}],"internalType":"struct MidLevelTestStruct","name":"NestedStruct","type":"tuple"}],"internalType":"struct TestStruct","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint64","name":"value","type":"uint64"}],"name":"setAlterablePrimitiveValue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int32","name":"field","type":"int32"},{"internalType":"string","name":"differentField","type":"string"},{"internalType":"uint8","name":"oracleId","type":"uint8"},{"internalType":"uint8[32]","name":"oracleIds","type":"uint8[32]"},{"internalType":"address","name":"account","type":"address"},{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"int192","name":"bigField","type":"int192"},{"components":[{"internalType":"bytes2","name":"FixedBytes","type":"bytes2"},{"components":[{"internalType":"int64","name":"IntVal","type":"int64"},{"internalType":"string","name":"S","type":"string"}],"internalType":"struct InnerTestStruct","name":"Inner","type":"tuple"}],"internalType":"struct MidLevelTestStruct","name":"nestedStruct","type":"tuple"}],"name":"triggerEvent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"field","type":"string"}],"name":"triggerEventWithDynamicTopic","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int32","name":"field1","type":"int32"},{"internalType":"int32","name":"field2","type":"int32"},{"internalType":"int32","name":"field3","type":"int32"}],"name":"triggerWithFourTopics","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"field1","type":"string"},{"internalType":"uint8[32]","name":"field2","type":"uint8[32]"},{"internalType":"bytes32","name":"field3","type":"bytes32"}],"name":"triggerWithFourTopicsWithHashed","outputs":[],"stateMutability":"nonpayable","type":"function"}]
\ No newline at end of file
diff --git a/contracts/src/v0.8/shared/test/helpers/ChainReaderTester.bin b/contracts/src/v0.8/shared/test/helpers/ChainReaderTester.bin
new file mode 100644
index 0000000000..cd3c6150eb
--- /dev/null
+++ b/contracts/src/v0.8/shared/test/helpers/ChainReaderTester.bin
@@ -0,0 +1 @@
+608060405234801561001057600080fd5b506001600390806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001600490806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555061249d806100ce6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a90e199811610071578063a90e199814610177578063ab5e0b3814610193578063dbfd7332146101b1578063ef4e1ced146101cd578063f6f871c8146101eb578063fbe9fbf61461021b576100b4565b80632c45576f146100b95780633272b66c146100e957806349eac2ac14610105578063679004a4146101215780636c9a43b61461013f5780637f002d671461015b575b600080fd5b6100d360048036038101906100ce9190610ed0565b610239565b6040516100e09190611300565b60405180910390f35b61010360048036038101906100fe9190611387565b6105ea565b005b61011f600480360381019061011a919061151f565b61063f565b005b610129610944565b6040516101369190611708565b60405180910390f35b61015960048036038101906101549190611756565b6109d0565b005b6101756004803603810190610170919061151f565b6109fc565b005b610191600480360381019061018c919061199a565b610a53565b005b61019b610ab1565b6040516101a89190611a1a565b60405180910390f35b6101cb60048036038101906101c69190611a35565b610abb565b005b6101d5610af8565b6040516101e29190611a1a565b60405180910390f35b6102056004803603810190610200919061151f565b610b01565b6040516102129190611300565b60405180910390f35b610223610c36565b6040516102309190611a1a565b60405180910390f35b610241610c54565b60006001836102509190611ab7565b8154811061026157610260611aeb565b5b90600052602060002090600a0201604051806101000160405290816000820160009054906101000a900460030b60030b60030b81526020016001820180546102a890611b49565b80601f01602080910402602001604051908101604052809291908181526020018280546102d490611b49565b80156103215780601f106102f657610100808354040283529160200191610321565b820191906000526020600020905b81548152906001019060200180831161030457829003601f168201915b505050505081526020016002820160009054906101000a900460ff1660ff1660ff168152602001600382016020806020026040519081016040528092919082602080156103a9576020028201916000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116103725790505b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820180548060200260200160405190810160405280929190818152602001828054801561048d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610443575b505050505081526020016006820160009054906101000a900460170b60170b60170b8152602001600782016040518060400160405290816000820160009054906101000a900460f01b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001600182016040518060400160405290816000820160009054906101000a900460070b60070b60070b815260200160018201805461055990611b49565b80601f016020809104026020016040519081016040528092919081815260200182805461058590611b49565b80156105d25780601f106105a7576101008083540402835291602001916105d2565b820191906000526020600020905b8154815290600101906020018083116105b557829003601f168201915b50505050508152505081525050815250509050919050565b81816040516105fa929190611baa565b60405180910390207f3d969732b1bbbb9f1d7eb9f3f14e4cb50a74d950b3ef916a397b85dfbab93c678383604051610633929190611c01565b60405180910390a25050565b60006040518061010001604052808c60030b81526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018960ff1681526020018860208060200260405190810160405280929190826020800280828437600081840152601f19601f82011690508083019250505050505081526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018460170b81526020018361075b90611d5f565b81525090806001815401808255809150506001900390600052602060002090600a020160009091909190915060008201518160000160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060208201518160010190816107c69190611f1e565b5060408201518160020160006101000a81548160ff021916908360ff1602179055506060820151816003019060206107ff929190610cc4565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019080519060200190610863929190610d5e565b5060c08201518160060160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160070160008201518160000160006101000a81548161ffff021916908360f01c021790555060208201518160010160008201518160000160006101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555060208201518160010190816109319190611f1e565b5050505050505050505050505050505050565b606060018054806020026020016040519081016040528092919081815260200182805480156109c657602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116109815790505b5050505050905090565b80600260006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b8960030b7f7188419dcd8b51877b71766f075f3626586c0ff190e7d056aa65ce9acb649a3d8a8a8a8a8a8a8a8a8a604051610a3f999897969594939291906122ed565b60405180910390a250505050505050505050565b8082604051610a629190612403565b604051809103902084604051610a789190612450565b60405180910390207f7220e4dbe4e9d0ed5f71acd022bc89c26748ac6784f2c548bc17bb8e52af34b060405160405180910390a4505050565b60006107c6905090565b8060030b8260030b8460030b7f91c80dc390f3d041b3a04b0099b19634499541ea26972250986ee4b24a12fac560405160405180910390a4505050565b60006003905090565b610b09610c54565b6040518061010001604052808c60030b81526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018960ff1681526020018860208060200260405190810160405280929190826020800280828437600081840152601f19601f82011690508083019250505050505081526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018460170b815260200183610c2390611d5f565b81525090509a9950505050505050505050565b6000600260009054906101000a900467ffffffffffffffff16905090565b604051806101000160405280600060030b815260200160608152602001600060ff168152602001610c83610de8565b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600060170b8152602001610cbe610e0b565b81525090565b826020601f01602090048101928215610d4d5791602002820160005b83821115610d1e57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610ce0565b8015610d4b5782816101000a81549060ff0219169055600101602081600001049283019260010302610d1e565b505b509050610d5a9190610e4c565b5090565b828054828255906000526020600020908101928215610dd7579160200282015b82811115610dd65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d7e565b5b509050610de49190610e4c565b5090565b604051806104000160405280602090602082028036833780820191505090505090565b604051806040016040528060007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001610e46610e69565b81525090565b5b80821115610e65576000816000905550600101610e4d565b5090565b6040518060400160405280600060070b8152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ead81610e9a565b8114610eb857600080fd5b50565b600081359050610eca81610ea4565b92915050565b600060208284031215610ee657610ee5610e90565b5b6000610ef484828501610ebb565b91505092915050565b60008160030b9050919050565b610f1381610efd565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f53578082015181840152602081019050610f38565b60008484015250505050565b6000601f19601f8301169050919050565b6000610f7b82610f19565b610f858185610f24565b9350610f95818560208601610f35565b610f9e81610f5f565b840191505092915050565b600060ff82169050919050565b610fbf81610fa9565b82525050565b600060209050919050565b600081905092915050565b6000819050919050565b6000610ff18383610fb6565b60208301905092915050565b6000602082019050919050565b61101381610fc5565b61101d8184610fd0565b925061102882610fdb565b8060005b838110156110595781516110408782610fe5565b965061104b83610ffd565b92505060018101905061102c565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061108c82611061565b9050919050565b61109c81611081565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006110da8383611093565b60208301905092915050565b6000602082019050919050565b60006110fe826110a2565b61110881856110ad565b9350611113836110be565b8060005b8381101561114457815161112b88826110ce565b9750611136836110e6565b925050600181019050611117565b5085935050505092915050565b60008160170b9050919050565b61116781611151565b82525050565b60007fffff00000000000000000000000000000000000000000000000000000000000082169050919050565b6111a28161116d565b82525050565b60008160070b9050919050565b6111be816111a8565b82525050565b60006040830160008301516111dc60008601826111b5565b50602083015184820360208601526111f48282610f70565b9150508091505092915050565b60006040830160008301516112196000860182611199565b506020830151848203602086015261123182826111c4565b9150508091505092915050565b60006104e0830160008301516112576000860182610f0a565b506020830151848203602086015261126f8282610f70565b91505060408301516112846040860182610fb6565b506060830151611297606086018261100a565b5060808301516112ab610460860182611093565b5060a08301518482036104808601526112c482826110f3565b91505060c08301516112da6104a086018261115e565b5060e08301518482036104c08601526112f38282611201565b9150508091505092915050565b6000602082019050818103600083015261131a818461123e565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261134757611346611322565b5b8235905067ffffffffffffffff81111561136457611363611327565b5b6020830191508360018202830111156113805761137f61132c565b5b9250929050565b6000806020838503121561139e5761139d610e90565b5b600083013567ffffffffffffffff8111156113bc576113bb610e95565b5b6113c885828601611331565b92509250509250929050565b6113dd81610efd565b81146113e857600080fd5b50565b6000813590506113fa816113d4565b92915050565b61140981610fa9565b811461141457600080fd5b50565b60008135905061142681611400565b92915050565b60008190508260208002820111156114475761144661132c565b5b92915050565b61145681611081565b811461146157600080fd5b50565b6000813590506114738161144d565b92915050565b60008083601f84011261148f5761148e611322565b5b8235905067ffffffffffffffff8111156114ac576114ab611327565b5b6020830191508360208202830111156114c8576114c761132c565b5b9250929050565b6114d881611151565b81146114e357600080fd5b50565b6000813590506114f5816114cf565b92915050565b600080fd5b600060408284031215611516576115156114fb565b5b81905092915050565b6000806000806000806000806000806104e08b8d03121561154357611542610e90565b5b60006115518d828e016113eb565b9a505060208b013567ffffffffffffffff81111561157257611571610e95565b5b61157e8d828e01611331565b995099505060406115918d828e01611417565b97505060606115a28d828e0161142c565b9650506104606115b48d828e01611464565b9550506104808b013567ffffffffffffffff8111156115d6576115d5610e95565b5b6115e28d828e01611479565b94509450506104a06115f68d828e016114e6565b9250506104c08b013567ffffffffffffffff81111561161857611617610e95565b5b6116248d828e01611500565b9150509295989b9194979a5092959850565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600067ffffffffffffffff82169050919050565b61167f81611662565b82525050565b60006116918383611676565b60208301905092915050565b6000602082019050919050565b60006116b582611636565b6116bf8185611641565b93506116ca83611652565b8060005b838110156116fb5781516116e28882611685565b97506116ed8361169d565b9250506001810190506116ce565b5085935050505092915050565b6000602082019050818103600083015261172281846116aa565b905092915050565b61173381611662565b811461173e57600080fd5b50565b6000813590506117508161172a565b92915050565b60006020828403121561176c5761176b610e90565b5b600061177a84828501611741565b91505092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117c082610f5f565b810181811067ffffffffffffffff821117156117df576117de611788565b5b80604052505050565b60006117f2610e86565b90506117fe82826117b7565b919050565b600067ffffffffffffffff82111561181e5761181d611788565b5b61182782610f5f565b9050602081019050919050565b82818337600083830152505050565b600061185661185184611803565b6117e8565b90508281526020810184848401111561187257611871611783565b5b61187d848285611834565b509392505050565b600082601f83011261189a57611899611322565b5b81356118aa848260208601611843565b91505092915050565b600067ffffffffffffffff8211156118ce576118cd611788565b5b602082029050919050565b60006118ec6118e7846118b3565b6117e8565b905080602084028301858111156119065761190561132c565b5b835b8181101561192f578061191b8882611417565b845260208401935050602081019050611908565b5050509392505050565b600082601f83011261194e5761194d611322565b5b602061195b8482856118d9565b91505092915050565b6000819050919050565b61197781611964565b811461198257600080fd5b50565b6000813590506119948161196e565b92915050565b600080600061044084860312156119b4576119b3610e90565b5b600084013567ffffffffffffffff8111156119d2576119d1610e95565b5b6119de86828701611885565b93505060206119ef86828701611939565b925050610420611a0186828701611985565b9150509250925092565b611a1481611662565b82525050565b6000602082019050611a2f6000830184611a0b565b92915050565b600080600060608486031215611a4e57611a4d610e90565b5b6000611a5c868287016113eb565b9350506020611a6d868287016113eb565b9250506040611a7e868287016113eb565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ac282610e9a565b9150611acd83610e9a565b9250828203905081811115611ae557611ae4611a88565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b6157607f821691505b602082108103611b7457611b73611b1a565b5b50919050565b600081905092915050565b6000611b918385611b7a565b9350611b9e838584611834565b82840190509392505050565b6000611bb7828486611b85565b91508190509392505050565b600082825260208201905092915050565b6000611be08385611bc3565b9350611bed838584611834565b611bf683610f5f565b840190509392505050565b60006020820190508181036000830152611c1c818486611bd4565b90509392505050565b600080fd5b600080fd5b611c388161116d565b8114611c4357600080fd5b50565b600081359050611c5581611c2f565b92915050565b611c64816111a8565b8114611c6f57600080fd5b50565b600081359050611c8181611c5b565b92915050565b600060408284031215611c9d57611c9c611c25565b5b611ca760406117e8565b90506000611cb784828501611c72565b600083015250602082013567ffffffffffffffff811115611cdb57611cda611c2a565b5b611ce784828501611885565b60208301525092915050565b600060408284031215611d0957611d08611c25565b5b611d1360406117e8565b90506000611d2384828501611c46565b600083015250602082013567ffffffffffffffff811115611d4757611d46611c2a565b5b611d5384828501611c87565b60208301525092915050565b6000611d6b3683611cf3565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611dd47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d97565b611dde8683611d97565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611e1b611e16611e1184610e9a565b611df6565b610e9a565b9050919050565b6000819050919050565b611e3583611e00565b611e49611e4182611e22565b848454611da4565b825550505050565b600090565b611e5e611e51565b611e69818484611e2c565b505050565b5b81811015611e8d57611e82600082611e56565b600181019050611e6f565b5050565b601f821115611ed257611ea381611d72565b611eac84611d87565b81016020851015611ebb578190505b611ecf611ec785611d87565b830182611e6e565b50505b505050565b600082821c905092915050565b6000611ef560001984600802611ed7565b1980831691505092915050565b6000611f0e8383611ee4565b9150826002028217905092915050565b611f2782610f19565b67ffffffffffffffff811115611f4057611f3f611788565b5b611f4a8254611b49565b611f55828285611e91565b600060209050601f831160018114611f885760008415611f76578287015190505b611f808582611f02565b865550611fe8565b601f198416611f9686611d72565b60005b82811015611fbe57848901518255600182019150602085019450602081019050611f99565b86831015611fdb5784890151611fd7601f891682611ee4565b8355505b6001600288020188555050505b505050505050565b611ff981610fa9565b82525050565b600060209050919050565b600081905092915050565b6000819050919050565b600061202e6020840184611417565b905092915050565b6000602082019050919050565b61204c81611fff565b612056818461200a565b925061206182612015565b8060005b8381101561209a57612077828461201f565b6120818782610fe5565b965061208c83612036565b925050600181019050612065565b505050505050565b6120ab81611081565b82525050565b600082825260208201905092915050565b6000819050919050565b60006120db6020840184611464565b905092915050565b6000602082019050919050565b60006120fc83856120b1565b9350612107826120c2565b8060005b858110156121405761211d82846120cc565b61212788826110ce565b9750612132836120e3565b92505060018101905061210b565b5085925050509392505050565b61215681611151565b82525050565b600061216b6020840184611c46565b905092915050565b600080fd5b60008235600160400383360303811261219457612193612173565b5b82810191505092915050565b60006121af6020840184611c72565b905092915050565b600080fd5b600080fd5b600080833560016020038436030381126121de576121dd612173565b5b83810192508235915060208301925067ffffffffffffffff821115612206576122056121b7565b5b60018202360383131561221c5761221b6121bc565b5b509250929050565b60006122308385610f24565b935061223d838584611834565b61224683610f5f565b840190509392505050565b60006040830161226460008401846121a0565b61227160008601826111b5565b5061227f60208401846121c1565b8583036020870152612292838284612224565b925050508091505092915050565b6000604083016122b3600084018461215c565b6122c06000860182611199565b506122ce6020840184612178565b84820360208601526122e08282612251565b9150508091505092915050565b60006104c0820190508181036000830152612309818b8d611bd4565b9050612318602083018a611ff0565b6123256040830189612043565b6123336104408301886120a2565b8181036104608301526123478186886120f0565b905061235761048083018561214d565b8181036104a083015261236a81846122a0565b90509a9950505050505050505050565b600081905092915050565b61238e81610fa9565b82525050565b60006123a08383612385565b60208301905092915050565b6123b581610fc5565b6123bf818461237a565b92506123ca82610fdb565b8060005b838110156123fb5781516123e28782612394565b96506123ed83610ffd565b9250506001810190506123ce565b505050505050565b600061240f82846123ac565b6104008201915081905092915050565b600061242a82610f19565b6124348185611b7a565b9350612444818560208601610f35565b80840191505092915050565b600061245c828461241f565b91508190509291505056fea2646970667358221220de35efc5367a96d097ae90bc77601fd3b4ffb844cb9b296810365c2c6f57747364736f6c63430008130033
\ No newline at end of file
diff --git a/core/services/relay/evm/bindings/chain_config_factory.go b/core/services/relay/evm/bindings/chain_config_factory.go
new file mode 100644
index 0000000000..ffe2cfa213
--- /dev/null
+++ b/core/services/relay/evm/bindings/chain_config_factory.go
@@ -0,0 +1,111 @@
+package bindings
+
+import (
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/smartcontractkit/chainlink/v2/core/chains/evm/assets"
+	"github.com/smartcontractkit/chainlink/v2/core/services/relay/evm/types"
+	"math/big"
+)
+
+func NewChainReaderConfig() types.ChainReaderConfig {
+	chainReaderConfig := types.ChainReaderConfig{
+		Contracts: map[string]types.ChainContractReader{
+			"ChainReaderTester": types.ChainContractReader{
+				Configs: map[string]*types.ChainReaderDefinition{
+					"GetAlterablePrimitiveValue": &types.ChainReaderDefinition{
+						CacheEnabled:      false,
+						ChainSpecificName: "getAlterablePrimitiveValue",
+						ReadType:          0,
+					}, "GetDifferentPrimitiveValue": &types.ChainReaderDefinition{
+						CacheEnabled:      false,
+						ChainSpecificName: "getDifferentPrimitiveValue",
+						ReadType:          0,
+					}, "GetElementAtIndex": &types.ChainReaderDefinition{
+						CacheEnabled:      false,
+						ChainSpecificName: "getElementAtIndex",
+						ReadType:          0,
+					}, "GetPrimitiveValue": &types.ChainReaderDefinition{
+						CacheEnabled:      false,
+						ChainSpecificName: "getPrimitiveValue",
+						ReadType:          0,
+					}, "GetSliceValue": &types.ChainReaderDefinition{
+						CacheEnabled:      false,
+						ChainSpecificName: "getSliceValue",
+						ReadType:          0,
+					}, "ReturnSeen": &types.ChainReaderDefinition{
+						CacheEnabled:      false,
+						ChainSpecificName: "returnSeen",
+						ReadType:          0,
+					},
+				},
+				ContractABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int32\",\"name\":\"field\",\"type\":\"int32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"differentField\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oracleId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8[32]\",\"name\":\"oracleIds\",\"type\":\"uint8[32]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"Accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"bigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"nestedStruct\",\"type\":\"tuple\"}],\"name\":\"Triggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"fieldHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"}],\"name\":\"TriggeredEventWithDynamicTopic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int32\",\"name\":\"field1\",\"type\":\"int32\"},{\"indexed\":true,\"internalType\":\"int32\",\"name\":\"field2\",\"type\":\"int32\"},{\"indexed\":true,\"internalType\":\"int32\",\"name\":\"field3\",\"type\":\"int32\"}],\"name\":\"TriggeredWithFourTopics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"field1\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint8[32]\",\"name\":\"field2\",\"type\":\"uint8[32]\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"field3\",\"type\":\"bytes32\"}],\"name\":\"TriggeredWithFourTopicsWithHashed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"field\",\"type\":\"int32\"},{\"internalType\":\"string\",\"name\":\"differentField\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"oracleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[32]\",\"name\":\"oracleIds\",\"type\":\"uint8[32]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"int192\",\"name\":\"bigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"nestedStruct\",\"type\":\"tuple\"}],\"name\":\"addTestStruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAlterablePrimitiveValue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDifferentPrimitiveValue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getElementAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"int32\",\"name\":\"Field\",\"type\":\"int32\"},{\"internalType\":\"string\",\"name\":\"DifferentField\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"OracleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[32]\",\"name\":\"OracleIds\",\"type\":\"uint8[32]\"},{\"internalType\":\"address\",\"name\":\"Account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"Accounts\",\"type\":\"address[]\"},{\"internalType\":\"int192\",\"name\":\"BigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"NestedStruct\",\"type\":\"tuple\"}],\"internalType\":\"struct TestStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrimitiveValue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSliceValue\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"field\",\"type\":\"int32\"},{\"internalType\":\"string\",\"name\":\"differentField\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"oracleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[32]\",\"name\":\"oracleIds\",\"type\":\"uint8[32]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"int192\",\"name\":\"bigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"nestedStruct\",\"type\":\"tuple\"}],\"name\":\"returnSeen\",\"outputs\":[{\"components\":[{\"internalType\":\"int32\",\"name\":\"Field\",\"type\":\"int32\"},{\"internalType\":\"string\",\"name\":\"DifferentField\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"OracleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[32]\",\"name\":\"OracleIds\",\"type\":\"uint8[32]\"},{\"internalType\":\"address\",\"name\":\"Account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"Accounts\",\"type\":\"address[]\"},{\"internalType\":\"int192\",\"name\":\"BigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"NestedStruct\",\"type\":\"tuple\"}],\"internalType\":\"struct TestStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"setAlterablePrimitiveValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"field\",\"type\":\"int32\"},{\"internalType\":\"string\",\"name\":\"differentField\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"oracleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[32]\",\"name\":\"oracleIds\",\"type\":\"uint8[32]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"int192\",\"name\":\"bigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"nestedStruct\",\"type\":\"tuple\"}],\"name\":\"triggerEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"}],\"name\":\"triggerEventWithDynamicTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"field1\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"field2\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"field3\",\"type\":\"int32\"}],\"name\":\"triggerWithFourTopics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"field1\",\"type\":\"string\"},{\"internalType\":\"uint8[32]\",\"name\":\"field2\",\"type\":\"uint8[32]\"},{\"internalType\":\"bytes32\",\"name\":\"field3\",\"type\":\"bytes32\"}],\"name\":\"triggerWithFourTopicsWithHashed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
+				ContractPollingFilter: types.ContractPollingFilter{
+					PollingFilter: types.PollingFilter{
+						LogsPerBlock: 0,
+						MaxLogsKept:  0,
+						Retention:    0,
+					},
+				},
+			},
+		},
+	}
+	return chainReaderConfig
+}
+
+func NewChainWriterConfig() types.ChainWriterConfig {
+	maxGasPrice := assets.NewWei(big.NewInt(10000000))
+	chainWriterConfig := types.ChainWriterConfig{
+		Contracts: map[string]*types.ContractConfig{
+			"ChainReaderTester": &types.ContractConfig{
+				Configs: map[string]*types.ChainWriterDefinition{
+					"AddTestStruct": &types.ChainWriterDefinition{
+						ChainSpecificName: "addTestStruct",
+						Checker:           "simulate",
+						FromAddress: common.Address{
+							0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+						},
+						GasLimit: 0,
+					}, "SetAlterablePrimitiveValue": &types.ChainWriterDefinition{
+						ChainSpecificName: "setAlterablePrimitiveValue",
+						Checker:           "simulate",
+						FromAddress: common.Address{
+							0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+						},
+						GasLimit: 2_000_000,
+					}, "TriggerEvent": &types.ChainWriterDefinition{
+						ChainSpecificName: "triggerEvent",
+						Checker:           "simulate",
+						FromAddress: common.Address{
+							0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+						},
+						GasLimit: 0,
+					}, "TriggerEventWithDynamicTopic": &types.ChainWriterDefinition{
+						ChainSpecificName: "triggerEventWithDynamicTopic",
+						Checker:           "simulate",
+						FromAddress: common.Address{
+							0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+						},
+						GasLimit: 0,
+					}, "TriggerWithFourTopics": &types.ChainWriterDefinition{
+						ChainSpecificName: "triggerWithFourTopics",
+						Checker:           "simulate",
+						FromAddress: common.Address{
+							0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+						},
+						GasLimit: 0,
+					}, "TriggerWithFourTopicsWithHashed": &types.ChainWriterDefinition{
+						ChainSpecificName: "triggerWithFourTopicsWithHashed",
+						Checker:           "simulate",
+						FromAddress: common.Address{
+							0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+						},
+						GasLimit: 0,
+					},
+				},
+				ContractABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int32\",\"name\":\"field\",\"type\":\"int32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"differentField\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oracleId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8[32]\",\"name\":\"oracleIds\",\"type\":\"uint8[32]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"Accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"bigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"nestedStruct\",\"type\":\"tuple\"}],\"name\":\"Triggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"fieldHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"}],\"name\":\"TriggeredEventWithDynamicTopic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int32\",\"name\":\"field1\",\"type\":\"int32\"},{\"indexed\":true,\"internalType\":\"int32\",\"name\":\"field2\",\"type\":\"int32\"},{\"indexed\":true,\"internalType\":\"int32\",\"name\":\"field3\",\"type\":\"int32\"}],\"name\":\"TriggeredWithFourTopics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"field1\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint8[32]\",\"name\":\"field2\",\"type\":\"uint8[32]\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"field3\",\"type\":\"bytes32\"}],\"name\":\"TriggeredWithFourTopicsWithHashed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"field\",\"type\":\"int32\"},{\"internalType\":\"string\",\"name\":\"differentField\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"oracleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[32]\",\"name\":\"oracleIds\",\"type\":\"uint8[32]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"int192\",\"name\":\"bigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"nestedStruct\",\"type\":\"tuple\"}],\"name\":\"addTestStruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAlterablePrimitiveValue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDifferentPrimitiveValue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getElementAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"int32\",\"name\":\"Field\",\"type\":\"int32\"},{\"internalType\":\"string\",\"name\":\"DifferentField\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"OracleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[32]\",\"name\":\"OracleIds\",\"type\":\"uint8[32]\"},{\"internalType\":\"address\",\"name\":\"Account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"Accounts\",\"type\":\"address[]\"},{\"internalType\":\"int192\",\"name\":\"BigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"NestedStruct\",\"type\":\"tuple\"}],\"internalType\":\"struct TestStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrimitiveValue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSliceValue\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"field\",\"type\":\"int32\"},{\"internalType\":\"string\",\"name\":\"differentField\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"oracleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[32]\",\"name\":\"oracleIds\",\"type\":\"uint8[32]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"int192\",\"name\":\"bigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"nestedStruct\",\"type\":\"tuple\"}],\"name\":\"returnSeen\",\"outputs\":[{\"components\":[{\"internalType\":\"int32\",\"name\":\"Field\",\"type\":\"int32\"},{\"internalType\":\"string\",\"name\":\"DifferentField\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"OracleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[32]\",\"name\":\"OracleIds\",\"type\":\"uint8[32]\"},{\"internalType\":\"address\",\"name\":\"Account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"Accounts\",\"type\":\"address[]\"},{\"internalType\":\"int192\",\"name\":\"BigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"NestedStruct\",\"type\":\"tuple\"}],\"internalType\":\"struct TestStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"setAlterablePrimitiveValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"field\",\"type\":\"int32\"},{\"internalType\":\"string\",\"name\":\"differentField\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"oracleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[32]\",\"name\":\"oracleIds\",\"type\":\"uint8[32]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"int192\",\"name\":\"bigField\",\"type\":\"int192\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"FixedBytes\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"IntVal\",\"type\":\"int64\"},{\"internalType\":\"string\",\"name\":\"S\",\"type\":\"string\"}],\"internalType\":\"struct InnerTestStruct\",\"name\":\"Inner\",\"type\":\"tuple\"}],\"internalType\":\"struct MidLevelTestStruct\",\"name\":\"nestedStruct\",\"type\":\"tuple\"}],\"name\":\"triggerEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"}],\"name\":\"triggerEventWithDynamicTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"field1\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"field2\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"field3\",\"type\":\"int32\"}],\"name\":\"triggerWithFourTopics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"field1\",\"type\":\"string\"},{\"internalType\":\"uint8[32]\",\"name\":\"field2\",\"type\":\"uint8[32]\"},{\"internalType\":\"bytes32\",\"name\":\"field3\",\"type\":\"bytes32\"}],\"name\":\"triggerWithFourTopicsWithHashed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
+			},
+		},
+		MaxGasPrice: maxGasPrice,
+	}
+	return chainWriterConfig
+}
diff --git a/core/services/relay/evm/bindings/chain_reader_tester.go b/core/services/relay/evm/bindings/chain_reader_tester.go
new file mode 100644
index 0000000000..ce3082af5e
--- /dev/null
+++ b/core/services/relay/evm/bindings/chain_reader_tester.go
@@ -0,0 +1,178 @@
+// Code generated evm-bindings; DO NOT EDIT.
+
+package bindings
+
+import (
+	"context"
+	"github.com/smartcontractkit/chainlink-common/pkg/types"
+	"github.com/smartcontractkit/chainlink-common/pkg/types/query/primitives"
+	"math/big"
+)
+
+// CodeDetails methods inputs and outputs structs
+type ChainReaderTester struct {
+	ContractReader types.ContractReader
+	ChainWriter    types.ChainWriter
+}
+
+type AddTestStructInput struct {
+	Field          int32
+	DifferentField string
+	OracleId       uint8
+	OracleIds      string
+	Account        string
+	Accounts       string
+	BigField       big.Int
+	NestedStruct   MidLevelTestStruct
+}
+
+type GetAlterablePrimitiveValueOutput struct {
+	Value uint64
+}
+
+type GetDifferentPrimitiveValueOutput struct {
+	Value uint64
+}
+
+type GetElementAtIndexInput struct {
+	I uint64
+}
+
+type GetElementAtIndexOutput struct {
+	Value TestStruct
+}
+
+type GetPrimitiveValueOutput struct {
+	Value uint64
+}
+
+type GetSliceValueOutput struct {
+	Value string
+}
+
+type InnerTestStruct struct {
+	IntVal string
+	S      string
+}
+
+type MidLevelTestStruct struct {
+	FixedBytes string
+	Inner      InnerTestStruct
+}
+
+type ReturnSeenInput struct {
+	Field          int32
+	DifferentField string
+	OracleId       uint8
+	OracleIds      string
+	Account        string
+	Accounts       string
+	BigField       big.Int
+	NestedStruct   MidLevelTestStruct
+}
+
+type ReturnSeenOutput struct {
+	Value TestStruct
+}
+
+type SetAlterablePrimitiveValueInput struct {
+	Value uint64
+}
+
+type TestStruct struct {
+	Field          int32
+	DifferentField string
+	OracleId       uint8
+	OracleIds      string
+	Account        string
+	Accounts       string
+	BigField       big.Int
+	NestedStruct   MidLevelTestStruct
+}
+
+type TriggerEventInput struct {
+	Field          int32
+	DifferentField string
+	OracleId       uint8
+	OracleIds      string
+	Account        string
+	Accounts       string
+	BigField       big.Int
+	NestedStruct   MidLevelTestStruct
+}
+
+type TriggerEventWithDynamicTopicInput struct {
+	Field string
+}
+
+type TriggerWithFourTopicsInput struct {
+	Field1 int32
+	Field2 int32
+	Field3 int32
+}
+
+type TriggerWithFourTopicsWithHashedInput struct {
+	Field1 string
+	Field2 string
+	Field3 [32]uint8
+}
+
+func (b ChainReaderTester) GetSliceValue(ctx context.Context, confidence primitives.ConfidenceLevel) (string, error) {
+	var output string
+	err := b.ContractReader.GetLatestValue(ctx, "ChainReaderTester", "GetSliceValue", confidence, nil, &output)
+	return output, err
+}
+
+func (b ChainReaderTester) SetAlterablePrimitiveValue(ctx context.Context, input SetAlterablePrimitiveValueInput, txId string, toAddress string, meta *types.TxMeta) error {
+	return b.ChainWriter.SubmitTransaction(ctx, "ChainReaderTester", "SetAlterablePrimitiveValue", input, txId, toAddress, meta, big.NewInt(0))
+}
+
+func (b ChainReaderTester) TriggerEvent(ctx context.Context, input TriggerEventInput, txId string, toAddress string, meta *types.TxMeta) error {
+	return b.ChainWriter.SubmitTransaction(ctx, "ChainReaderTester", "TriggerEvent", input, txId, toAddress, meta, big.NewInt(0))
+}
+
+func (b ChainReaderTester) TriggerEventWithDynamicTopic(ctx context.Context, input TriggerEventWithDynamicTopicInput, txId string, toAddress string, meta *types.TxMeta) error {
+	return b.ChainWriter.SubmitTransaction(ctx, "ChainReaderTester", "TriggerEventWithDynamicTopic", input, txId, toAddress, meta, big.NewInt(0))
+}
+
+func (b ChainReaderTester) TriggerWithFourTopics(ctx context.Context, input TriggerWithFourTopicsInput, txId string, toAddress string, meta *types.TxMeta) error {
+	return b.ChainWriter.SubmitTransaction(ctx, "ChainReaderTester", "TriggerWithFourTopics", input, txId, toAddress, meta, big.NewInt(0))
+}
+
+func (b ChainReaderTester) AddTestStruct(ctx context.Context, input AddTestStructInput, txId string, toAddress string, meta *types.TxMeta) error {
+	return b.ChainWriter.SubmitTransaction(ctx, "ChainReaderTester", "AddTestStruct", input, txId, toAddress, meta, big.NewInt(0))
+}
+
+func (b ChainReaderTester) GetAlterablePrimitiveValue(ctx context.Context, confidence primitives.ConfidenceLevel) (uint64, error) {
+	var output uint64
+	err := b.ContractReader.GetLatestValue(ctx, "ChainReaderTester", "GetAlterablePrimitiveValue", confidence, nil, &output)
+	return output, err
+}
+
+func (b ChainReaderTester) GetPrimitiveValue(ctx context.Context, confidence primitives.ConfidenceLevel) (uint64, error) {
+	var output uint64
+	err := b.ContractReader.GetLatestValue(ctx, "ChainReaderTester", "GetPrimitiveValue", confidence, nil, &output)
+	return output, err
+}
+
+func (b ChainReaderTester) TriggerWithFourTopicsWithHashed(ctx context.Context, input TriggerWithFourTopicsWithHashedInput, txId string, toAddress string, meta *types.TxMeta) error {
+	return b.ChainWriter.SubmitTransaction(ctx, "ChainReaderTester", "TriggerWithFourTopicsWithHashed", input, txId, toAddress, meta, big.NewInt(0))
+}
+
+func (b ChainReaderTester) GetDifferentPrimitiveValue(ctx context.Context, confidence primitives.ConfidenceLevel) (uint64, error) {
+	var output uint64
+	err := b.ContractReader.GetLatestValue(ctx, "ChainReaderTester", "GetDifferentPrimitiveValue", confidence, nil, &output)
+	return output, err
+}
+
+func (b ChainReaderTester) GetElementAtIndex(ctx context.Context, input GetElementAtIndexInput, confidence primitives.ConfidenceLevel) (GetElementAtIndexOutput, error) {
+	output := GetElementAtIndexOutput{}
+	err := b.ContractReader.GetLatestValue(ctx, "ChainReaderTester", "GetElementAtIndex", confidence, input, &output)
+	return output, err
+}
+
+func (b ChainReaderTester) ReturnSeen(ctx context.Context, input ReturnSeenInput, confidence primitives.ConfidenceLevel) (ReturnSeenOutput, error) {
+	output := ReturnSeenOutput{}
+	err := b.ContractReader.GetLatestValue(ctx, "ChainReaderTester", "ReturnSeen", confidence, input, &output)
+	return output, err
+}
diff --git a/core/services/relay/evm/chain_components_test.go b/core/services/relay/evm/chain_components_test.go
index 841e2d0a7e..4b06fd5b25 100644
--- a/core/services/relay/evm/chain_components_test.go
+++ b/core/services/relay/evm/chain_components_test.go
@@ -153,7 +153,7 @@ func TestContractReaderEventsInitValidation(t *testing.T) {
 
 func TestChainComponents(t *testing.T) {
 	t.Parallel()
-	it := &EVMChainComponentsInterfaceTester[*testing.T]{Helper: &helper{}}
+	it := &EVMChainComponentsInterfaceTester[*testing.T]{Helper: &Helper{}}
 
 	it.Helper.Init(t)
 
@@ -162,7 +162,8 @@ func TestChainComponents(t *testing.T) {
 	RunContractReaderInterfaceTests[*testing.T](t, commontestutils.WrapContractReaderTesterForLoop(it), false)
 }
 
-type helper struct {
+// TODO move to make it reusable
+type Helper struct {
 	sim         *backends.SimulatedBackend
 	accounts    []*bind.TransactOpts
 	deployerKey *ecdsa.PrivateKey
@@ -172,7 +173,7 @@ type helper struct {
 	db          *sqlx.DB
 }
 
-func (h *helper) Init(t *testing.T) {
+func (h *Helper) Init(t *testing.T) {
 	h.SetupKeys(t)
 
 	h.accounts = h.Accounts(t)
@@ -186,7 +187,7 @@ func (h *helper) Init(t *testing.T) {
 	h.Commit()
 }
 
-func (h *helper) SetupKeys(t *testing.T) {
+func (h *Helper) SetupKeys(t *testing.T) {
 	deployerPkey, err := crypto.GenerateKey()
 	require.NoError(t, err)
 	h.deployerKey = deployerPkey
@@ -196,7 +197,7 @@ func (h *helper) SetupKeys(t *testing.T) {
 	h.senderKey = senderPkey
 }
 
-func (h *helper) Accounts(t *testing.T) []*bind.TransactOpts {
+func (h *Helper) Accounts(t *testing.T) []*bind.TransactOpts {
 	if h.accounts != nil {
 		return h.accounts
 	}
@@ -209,15 +210,15 @@ func (h *helper) Accounts(t *testing.T) []*bind.TransactOpts {
 	return []*bind.TransactOpts{deployer, sender}
 }
 
-func (h *helper) MustGenerateRandomKey(t *testing.T) ethkey.KeyV2 {
+func (h *Helper) MustGenerateRandomKey(t *testing.T) ethkey.KeyV2 {
 	return cltest.MustGenerateRandomKey(t)
 }
 
-func (h *helper) GasPriceBufferPercent() int64 {
+func (h *Helper) GasPriceBufferPercent() int64 {
 	return 0
 }
 
-func (h *helper) Backend() bind.ContractBackend {
+func (h *Helper) Backend() bind.ContractBackend {
 	if h.sim == nil {
 		h.sim = backends.NewSimulatedBackend(
 			core.GenesisAlloc{h.accounts[0].From: {Balance: big.NewInt(math.MaxInt64)}, h.accounts[1].From: {Balance: big.NewInt(math.MaxInt64)}}, commonGasLimitOnEvms*5000)
@@ -227,42 +228,42 @@ func (h *helper) Backend() bind.ContractBackend {
 	return h.sim
 }
 
-func (h *helper) Commit() {
+func (h *Helper) Commit() {
 	h.sim.Commit()
 }
 
-func (h *helper) Client(t *testing.T) client.Client {
+func (h *Helper) Client(t *testing.T) client.Client {
 	if h.client != nil {
 		return h.client
 	}
 	return client.NewSimulatedBackendClient(t, h.sim, big.NewInt(1337))
 }
 
-func (h *helper) ChainID() *big.Int {
+func (h *Helper) ChainID() *big.Int {
 	return testutils.SimulatedChainID
 }
 
-func (h *helper) NewSqlxDB(t *testing.T) *sqlx.DB {
+func (h *Helper) NewSqlxDB(t *testing.T) *sqlx.DB {
 	return pgtest.NewSqlxDB(t)
 }
 
-func (h *helper) Context(t *testing.T) context.Context {
+func (h *Helper) Context(t *testing.T) context.Context {
 	return testutils.Context(t)
 }
 
-func (h *helper) ChainReaderEVMClient(ctx context.Context, t *testing.T, ht logpoller.HeadTracker, conf types.ChainReaderConfig) client.Client {
+func (h *Helper) ChainReaderEVMClient(ctx context.Context, t *testing.T, ht logpoller.HeadTracker, conf types.ChainReaderConfig) client.Client {
 	// wrap the client so that we can mock historical contract state
 	cwh := &evm.ClientWithContractHistory{Client: h.Client(t), HT: ht}
 	require.NoError(t, cwh.Init(ctx, conf))
 	return cwh
 }
 
-func (h *helper) WrappedChainWriter(cw clcommontypes.ChainWriter, client client.Client) clcommontypes.ChainWriter {
+func (h *Helper) WrappedChainWriter(cw clcommontypes.ChainWriter, client client.Client) clcommontypes.ChainWriter {
 	cwhw := evm.NewChainWriterHistoricalWrapper(cw, client.(*evm.ClientWithContractHistory))
 	return cwhw
 }
 
-func (h *helper) MaxWaitTimeForEvents() time.Duration {
+func (h *Helper) MaxWaitTimeForEvents() time.Duration {
 	// From trial and error, when running on CI, sometimes the boxes get slow
 	maxWaitTime := time.Second * 30
 	maxWaitTimeStr, ok := os.LookupEnv("MAX_WAIT_TIME_FOR_EVENTS_S")
@@ -276,7 +277,7 @@ func (h *helper) MaxWaitTimeForEvents() time.Duration {
 	return maxWaitTime
 }
 
-func (h *helper) TXM(t *testing.T, client client.Client) evmtxmgr.TxManager {
+func (h *Helper) TXM(t *testing.T, client client.Client) evmtxmgr.TxManager {
 	if h.txm != nil {
 		return h.txm
 	}
diff --git a/core/services/relay/evm/evmtesting/chain_components_interface_tester.go b/core/services/relay/evm/evmtesting/chain_components_interface_tester.go
index c877f48784..20552a912b 100644
--- a/core/services/relay/evm/evmtesting/chain_components_interface_tester.go
+++ b/core/services/relay/evm/evmtesting/chain_components_interface_tester.go
@@ -64,8 +64,8 @@ type EVMChainComponentsInterfaceTester[T TestingT[T]] struct {
 	address           string
 	address2          string
 	contractTesters   map[string]*chain_reader_tester.ChainReaderTester
-	chainReaderConfig types.ChainReaderConfig
-	chainWriterConfig types.ChainWriterConfig
+	ChainReaderConfig *types.ChainReaderConfig
+	ChainWriterConfig *types.ChainWriterConfig
 	deployerAuth      *bind.TransactOpts
 	senderAuth        *bind.TransactOpts
 	cr                evm.ChainReaderService
@@ -114,165 +114,171 @@ func (it *EVMChainComponentsInterfaceTester[T]) Setup(t T) {
 		},
 	}
 
-	it.chainReaderConfig = types.ChainReaderConfig{
-		Contracts: map[string]types.ChainContractReader{
-			AnyContractName: {
-				ContractABI: chain_reader_tester.ChainReaderTesterMetaData.ABI,
-				ContractPollingFilter: types.ContractPollingFilter{
-					GenericEventNames: []string{EventName, EventWithFilterName, triggerWithAllTopicsWithHashed},
-				},
-				Configs: map[string]*types.ChainReaderDefinition{
-					MethodTakingLatestParamsReturningTestStruct: &methodTakingLatestParamsReturningTestStructConfig,
-					MethodReturningAlterableUint64: {
-						ChainSpecificName: "getAlterablePrimitiveValue",
-					},
-					MethodReturningUint64: {
-						ChainSpecificName: "getPrimitiveValue",
-					},
-					MethodReturningUint64Slice: {
-						ChainSpecificName: "getSliceValue",
+	if it.ChainReaderConfig == nil {
+		it.ChainReaderConfig = &types.ChainReaderConfig{
+			Contracts: map[string]types.ChainContractReader{
+				AnyContractName: {
+					ContractABI: chain_reader_tester.ChainReaderTesterMetaData.ABI,
+					ContractPollingFilter: types.ContractPollingFilter{
+						GenericEventNames: []string{EventName, EventWithFilterName, triggerWithAllTopicsWithHashed},
 					},
-					EventName: {
-						ChainSpecificName: "Triggered",
-						ReadType:          types.Event,
-						OutputModifications: codec.ModifiersConfig{
-							&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+					Configs: map[string]*types.ChainReaderDefinition{
+						MethodTakingLatestParamsReturningTestStruct: &methodTakingLatestParamsReturningTestStructConfig,
+						MethodReturningAlterableUint64: {
+							ChainSpecificName: "getAlterablePrimitiveValue",
 						},
-					},
-					EventWithFilterName: {
-						ChainSpecificName: "Triggered",
-						ReadType:          types.Event,
-						EventDefinitions:  &types.EventDefinitions{InputFields: []string{"Field"}},
-					},
-					triggerWithDynamicTopic: {
-						ChainSpecificName: triggerWithDynamicTopic,
-						ReadType:          types.Event,
-						EventDefinitions: &types.EventDefinitions{
-							InputFields: []string{"fieldHash"},
-							// No specific reason for filter being defined here instead of on contract level, this is just for test case variety.
-							PollingFilter: &types.PollingFilter{},
+						MethodReturningUint64: {
+							ChainSpecificName: "getPrimitiveValue",
 						},
-						InputModifications: codec.ModifiersConfig{
-							&codec.RenameModifierConfig{Fields: map[string]string{"FieldHash": "Field"}},
+						MethodReturningUint64Slice: {
+							ChainSpecificName: "getSliceValue",
 						},
-					},
-					triggerWithAllTopics: {
-						ChainSpecificName: triggerWithAllTopics,
-						ReadType:          types.Event,
-						EventDefinitions: &types.EventDefinitions{
-							InputFields:   []string{"Field1", "Field2", "Field3"},
-							PollingFilter: &types.PollingFilter{},
+						EventName: {
+							ChainSpecificName: "Triggered",
+							ReadType:          types.Event,
+							OutputModifications: codec.ModifiersConfig{
+								&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+							},
 						},
-						// This doesn't have to be here, since the defalt mapping would work, but is left as an example.
-						// Keys which are string float values(confidence levels) are chain agnostic and should be reused across chains.
-						// These float values can map to different finality concepts across chains.
-						ConfidenceConfirmations: map[string]int{"0.0": int(evmtypes.Unconfirmed), "1.0": int(evmtypes.Finalized)},
-					},
-					triggerWithAllTopicsWithHashed: {
-						ChainSpecificName: triggerWithAllTopicsWithHashed,
-						ReadType:          types.Event,
-						EventDefinitions: &types.EventDefinitions{
-							InputFields: []string{"Field1", "Field2", "Field3"},
+						EventWithFilterName: {
+							ChainSpecificName: "Triggered",
+							ReadType:          types.Event,
+							EventDefinitions:  &types.EventDefinitions{InputFields: []string{"Field"}},
 						},
-					},
-					MethodReturningSeenStruct: {
-						ChainSpecificName: "returnSeen",
-						InputModifications: codec.ModifiersConfig{
-							&codec.HardCodeModifierConfig{
-								OnChainValues: map[string]any{
-									"BigField": testStruct.BigField.String(),
-									"Account":  hexutil.Encode(testStruct.Account),
-								},
+						triggerWithDynamicTopic: {
+							ChainSpecificName: triggerWithDynamicTopic,
+							ReadType:          types.Event,
+							EventDefinitions: &types.EventDefinitions{
+								InputFields: []string{"fieldHash"},
+								// No specific reason for filter being defined here instead of on contract level, this is just for test case variety.
+								PollingFilter: &types.PollingFilter{},
+							},
+							InputModifications: codec.ModifiersConfig{
+								&codec.RenameModifierConfig{Fields: map[string]string{"FieldHash": "Field"}},
+							},
+						},
+						triggerWithAllTopics: {
+							ChainSpecificName: triggerWithAllTopics,
+							ReadType:          types.Event,
+							EventDefinitions: &types.EventDefinitions{
+								InputFields:   []string{"Field1", "Field2", "Field3"},
+								PollingFilter: &types.PollingFilter{},
+							},
+							// This doesn't have to be here, since the defalt mapping would work, but is left as an example.
+							// Keys which are string float values(confidence levels) are chain agnostic and should be reused across chains.
+							// These float values can map to different finality concepts across chains.
+							ConfidenceConfirmations: map[string]int{"0.0": int(evmtypes.Unconfirmed), "1.0": int(evmtypes.Finalized)},
+						},
+						triggerWithAllTopicsWithHashed: {
+							ChainSpecificName: triggerWithAllTopicsWithHashed,
+							ReadType:          types.Event,
+							EventDefinitions: &types.EventDefinitions{
+								InputFields: []string{"Field1", "Field2", "Field3"},
 							},
-							&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
 						},
-						OutputModifications: codec.ModifiersConfig{
-							&codec.HardCodeModifierConfig{OffChainValues: map[string]any{"ExtraField": AnyExtraValue}},
-							&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+						MethodReturningSeenStruct: {
+							ChainSpecificName: "returnSeen",
+							InputModifications: codec.ModifiersConfig{
+								&codec.HardCodeModifierConfig{
+									OnChainValues: map[string]any{
+										"BigField": testStruct.BigField.String(),
+										"Account":  hexutil.Encode(testStruct.Account),
+									},
+								},
+								&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+							},
+							OutputModifications: codec.ModifiersConfig{
+								&codec.HardCodeModifierConfig{OffChainValues: map[string]any{"ExtraField": AnyExtraValue}},
+								&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+							},
 						},
 					},
 				},
-			},
-			AnySecondContractName: {
-				ContractABI: chain_reader_tester.ChainReaderTesterMetaData.ABI,
-				Configs: map[string]*types.ChainReaderDefinition{
-					MethodTakingLatestParamsReturningTestStruct: &methodTakingLatestParamsReturningTestStructConfig,
-					MethodReturningUint64: {
-						ChainSpecificName: "getDifferentPrimitiveValue",
+				AnySecondContractName: {
+					ContractABI: chain_reader_tester.ChainReaderTesterMetaData.ABI,
+					Configs: map[string]*types.ChainReaderDefinition{
+						MethodTakingLatestParamsReturningTestStruct: &methodTakingLatestParamsReturningTestStructConfig,
+						MethodReturningUint64: {
+							ChainSpecificName: "getDifferentPrimitiveValue",
+						},
 					},
 				},
 			},
-		},
+		}
 	}
+
 	it.GetChainReader(t)
 	it.txm = it.Helper.TXM(t, it.client)
 
-	it.chainWriterConfig = types.ChainWriterConfig{
-		Contracts: map[string]*types.ContractConfig{
-			AnyContractName: {
-				ContractABI: chain_reader_tester.ChainReaderTesterMetaData.ABI,
-				Configs: map[string]*types.ChainWriterDefinition{
-					"addTestStruct": {
-						ChainSpecificName: "addTestStruct",
-						FromAddress:       it.Helper.Accounts(t)[1].From,
-						GasLimit:          2_000_000,
-						Checker:           "simulate",
-						InputModifications: codec.ModifiersConfig{
-							&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+	if it.ChainWriterConfig == nil {
+		it.ChainWriterConfig = &types.ChainWriterConfig{
+			Contracts: map[string]*types.ContractConfig{
+				AnyContractName: {
+					ContractABI: chain_reader_tester.ChainReaderTesterMetaData.ABI,
+					Configs: map[string]*types.ChainWriterDefinition{
+						"addTestStruct": {
+							ChainSpecificName: "addTestStruct",
+							FromAddress:       it.Helper.Accounts(t)[1].From,
+							GasLimit:          2_000_000,
+							Checker:           "simulate",
+							InputModifications: codec.ModifiersConfig{
+								&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+							},
 						},
-					},
-					"setAlterablePrimitiveValue": {
-						ChainSpecificName: "setAlterablePrimitiveValue",
-						FromAddress:       it.Helper.Accounts(t)[1].From,
-						GasLimit:          2_000_000,
-						Checker:           "simulate",
-					},
-					"triggerEvent": {
-						ChainSpecificName: "triggerEvent",
-						FromAddress:       it.Helper.Accounts(t)[1].From,
-						GasLimit:          2_000_000,
-						Checker:           "simulate",
-						InputModifications: codec.ModifiersConfig{
-							&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+						"setAlterablePrimitiveValue": {
+							ChainSpecificName: "setAlterablePrimitiveValue",
+							FromAddress:       it.Helper.Accounts(t)[1].From,
+							GasLimit:          2_000_000,
+							Checker:           "simulate",
+						},
+						"triggerEvent": {
+							ChainSpecificName: "triggerEvent",
+							FromAddress:       it.Helper.Accounts(t)[1].From,
+							GasLimit:          2_000_000,
+							Checker:           "simulate",
+							InputModifications: codec.ModifiersConfig{
+								&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+							},
+						},
+						"triggerEventWithDynamicTopic": {
+							ChainSpecificName: "triggerEventWithDynamicTopic",
+							FromAddress:       it.Helper.Accounts(t)[1].From,
+							GasLimit:          2_000_000,
+							Checker:           "simulate",
+						},
+						"triggerWithFourTopics": {
+							ChainSpecificName: "triggerWithFourTopics",
+							FromAddress:       it.Helper.Accounts(t)[1].From,
+							GasLimit:          2_000_000,
+							Checker:           "simulate",
+						},
+						"triggerWithFourTopicsWithHashed": {
+							ChainSpecificName: "triggerWithFourTopicsWithHashed",
+							FromAddress:       it.Helper.Accounts(t)[1].From,
+							GasLimit:          2_000_000,
+							Checker:           "simulate",
 						},
-					},
-					"triggerEventWithDynamicTopic": {
-						ChainSpecificName: "triggerEventWithDynamicTopic",
-						FromAddress:       it.Helper.Accounts(t)[1].From,
-						GasLimit:          2_000_000,
-						Checker:           "simulate",
-					},
-					"triggerWithFourTopics": {
-						ChainSpecificName: "triggerWithFourTopics",
-						FromAddress:       it.Helper.Accounts(t)[1].From,
-						GasLimit:          2_000_000,
-						Checker:           "simulate",
-					},
-					"triggerWithFourTopicsWithHashed": {
-						ChainSpecificName: "triggerWithFourTopicsWithHashed",
-						FromAddress:       it.Helper.Accounts(t)[1].From,
-						GasLimit:          2_000_000,
-						Checker:           "simulate",
 					},
 				},
-			},
-			AnySecondContractName: {
-				ContractABI: chain_reader_tester.ChainReaderTesterMetaData.ABI,
-				Configs: map[string]*types.ChainWriterDefinition{
-					"addTestStruct": {
-						ChainSpecificName: "addTestStruct",
-						FromAddress:       it.Helper.Accounts(t)[1].From,
-						GasLimit:          2_000_000,
-						Checker:           "simulate",
-						InputModifications: codec.ModifiersConfig{
-							&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+				AnySecondContractName: {
+					ContractABI: chain_reader_tester.ChainReaderTesterMetaData.ABI,
+					Configs: map[string]*types.ChainWriterDefinition{
+						"addTestStruct": {
+							ChainSpecificName: "addTestStruct",
+							FromAddress:       it.Helper.Accounts(t)[1].From,
+							GasLimit:          2_000_000,
+							Checker:           "simulate",
+							InputModifications: codec.ModifiersConfig{
+								&codec.RenameModifierConfig{Fields: map[string]string{"NestedStruct.Inner.IntVal": "I"}},
+							},
 						},
 					},
 				},
 			},
-		},
-		MaxGasPrice: assets.NewWei(big.NewInt(1000000000000000000)),
+			MaxGasPrice: assets.NewWei(big.NewInt(1000000000000000000)),
+		}
 	}
+
 	it.deployNewContracts(t)
 }
 
@@ -307,7 +313,7 @@ func (it *EVMChainComponentsInterfaceTester[T]) GetChainReader(t T) clcommontype
 	require.NoError(t, lp.Start(ctx))
 
 	// encode and decode the config to ensure the test covers type issues
-	confBytes, err := json.Marshal(it.chainReaderConfig)
+	confBytes, err := json.Marshal(it.ChainReaderConfig)
 	require.NoError(t, err)
 
 	conf, err := types.ChainReaderConfigFromBytes(confBytes)
@@ -333,7 +339,7 @@ func (it *EVMChainComponentsInterfaceTester[T]) GetChainWriter(t T) clcommontype
 		return it.cw
 	}
 
-	cw, err := evm.NewChainWriterService(logger.NullLogger, it.client, it.txm, it.gasEstimator, it.chainWriterConfig)
+	cw, err := evm.NewChainWriterService(logger.NullLogger, it.client, it.txm, it.gasEstimator, *it.ChainWriterConfig)
 	require.NoError(t, err)
 	it.cw = it.Helper.WrappedChainWriter(cw, it.client)
 
diff --git a/core/services/relay/evm/go_bindings_test.go b/core/services/relay/evm/go_bindings_test.go
new file mode 100644
index 0000000000..879c716956
--- /dev/null
+++ b/core/services/relay/evm/go_bindings_test.go
@@ -0,0 +1,106 @@
+package evm_test
+
+import (
+	"github.com/smartcontractkit/chainlink-common/pkg/types"
+	"github.com/smartcontractkit/chainlink-common/pkg/types/interfacetests"
+	"github.com/smartcontractkit/chainlink-common/pkg/types/query/primitives"
+	"github.com/smartcontractkit/chainlink-common/pkg/utils/tests"
+	"github.com/smartcontractkit/chainlink/v2/core/chains/evm/assets"
+	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated/chain_reader_tester"
+	"github.com/smartcontractkit/chainlink/v2/core/services/relay/evm/bindings"
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+	"math/big"
+	"testing"
+	"time"
+
+	_ "github.com/smartcontractkit/chainlink-common/pkg/types/interfacetests"       //nolint common practice to import test mods with .
+	. "github.com/smartcontractkit/chainlink/v2/core/services/relay/evm/evmtesting" //nolint common practice to import test mods with .
+)
+
+//go:generate evm-bindings -output core/services/relay/evm/bindings -contracts contracts/src/v0.8/shared/test/helpers
+func TestGoBindings(t *testing.T) {
+	t.Parallel()
+
+	chainReaderConfig := bindings.NewChainReaderConfig()
+	chainWriterConfig := bindings.NewChainWriterConfig()
+
+	it := &EVMChainComponentsInterfaceTester[*testing.T]{Helper: &Helper{},
+		ChainReaderConfig: &chainReaderConfig, ChainWriterConfig: &chainWriterConfig}
+
+	it.Helper.Init(t)
+
+	t.Run("Deploy contract set value using cw and get value using chain reader", func(t *testing.T) {
+		//TODO remove. This value cannot be autogenerated so we need a way to customize it.
+		chainWriterConfig.MaxGasPrice = assets.NewWei(big.NewInt(1000000000))
+
+		it.Setup(t)
+
+		chainWriterConfig.Contracts["ChainReaderTester"].Configs["SetAlterablePrimitiveValue"].FromAddress = it.GetAuthWithGasSet(t).From
+
+		//address, _, deployedContract, err := chain_reader_tester.DeployChainReaderTester(it.GetAuthWithGasSet(t), it.Helper.Backend())
+		address, _, _, err := chain_reader_tester.DeployChainReaderTester(it.GetAuthWithGasSet(t), it.Helper.Backend())
+		require.NoError(t, err)
+		chainReader := it.GetChainReader(t)
+		chainWriter := it.GetChainWriter(t)
+		testContext := it.Helper.Context(t)
+
+		//TODO properly wait for contract deployment confirmation
+		time.Sleep(time.Duration(5) * time.Second)
+		require.NoError(t, chainReader.Bind(testContext, []types.BoundContract{{address.String(), "ChainReaderTester"}}))
+		it.IncNonce()
+
+		chainReaderTester := bindings.ChainReaderTester{
+			ContractReader: chainReader,
+			ChainWriter:    chainWriter,
+		}
+
+		txId := "123"
+		err = chainReaderTester.SetAlterablePrimitiveValue(testContext, bindings.SetAlterablePrimitiveValueInput{Value: uint64(100)}, txId, address.String(), nil)
+		require.NoError(t, err)
+
+		err = interfacetests.WaitForTransactionStatus(t, it, txId, types.Finalized, false)
+		require.NoError(t, err)
+		//_, err = deployedContract.SetAlterablePrimitiveValue(it.GetAuthWithGasSet(t), 100)
+		//require.NoError(t, err)
+
+		value, err := chainReaderTester.GetAlterablePrimitiveValue(testContext, primitives.Unconfirmed)
+		require.NoError(t, err)
+		assert.Equal(t, value, uint64(100))
+	})
+}
+
+func TestGoBindingsTxWithGeth(t *testing.T) {
+	t.Parallel()
+
+	chainReaderConfig := bindings.NewChainReaderConfig()
+
+	it := &EVMChainComponentsInterfaceTester[*testing.T]{Helper: &Helper{},
+		ChainReaderConfig: &chainReaderConfig}
+
+	it.Helper.Init(t)
+	t.Run("Deploy contract set value using geth and get value using chain reader", func(t *testing.T) {
+		it.Setup(t)
+
+		ctx := tests.Context(t)
+
+		address, _, deployedContract, err := chain_reader_tester.DeployChainReaderTester(it.GetAuthWithGasSet(t), it.Helper.Backend())
+		require.NoError(t, err)
+		it.IncNonce()
+		_, err = deployedContract.SetAlterablePrimitiveValue(it.GetAuthWithGasSet(t), 100)
+		require.NoError(t, err)
+
+		time.Sleep(time.Duration(5) * time.Second)
+
+		chainReader := it.GetChainReader(t)
+		require.NoError(t, chainReader.Bind(ctx, []types.BoundContract{{address.String(), "ChainReaderTester"}}))
+
+		chainReaderTester := bindings.ChainReaderTester{
+			ContractReader: chainReader,
+		}
+
+		value, err := chainReaderTester.GetAlterablePrimitiveValue(ctx, primitives.Unconfirmed)
+		require.NoError(t, err)
+		assert.Equal(t, value, uint64(100))
+	})
+}
-- 
2.44.0

